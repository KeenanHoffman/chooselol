#!/usr/bin/env node

'use strict';

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
app.sockets = {};

var orm = require('../orm/orm.js');
orm.initialize(app, app.get('port'), function(collections, connections) {
  app.models = collections;
  app.connections = connections;
  var server = http.createServer(app);
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
  var io = require('socket.io')(server);
  io.on('connection', function(socket){
    if (socket.handshake.query.twitchName) {
      console.log(socket.handshake.query.twitchName + ' connected');
      app.sockets[socket.handshake.query.twitchName] = socket;
    } else {
      console.log('anonymous connected');
    }
    socket.on('room', function(room) {
        socket.join(room);
    });
  });
});

function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    return val;
  }
  if (port >= 0) {
    return port;
  }
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
